************ BUSINESS GAME PLAN (Trend Following Bot) ************

* Evaluating 14 day periods for metrics
* maintain a manual list of tickers based on news but also search categorically for outstanding stocks
* anything on Robinhood or coinbase is prioritize for sell but also monitor for buy
* PHASE 1:
    Technical Analysis
        Moving AVGs: Widely separated moving averages (e.g., 20 EMA and 50 EMA) suggest a trend.,
        ATR to measure volatility (High ATR = trending potential; Low ATR = likely mean-reversion.)
        ADX  (> 25 signals a strong trend, while < 20 indicates a weak trend)
        RSI (above 70 RSI means sell, under 30 RSI means buy) **ONLY use when confirmed by Moving AVGs
        Volume-based filter to confirm breakouts/trend strength (Relative Volume > 1.5 often indicates strong participation)
    Fundamental Analysis:
        Low Price-to-Earnings (P/E): undervaluation compared to peers.
        High Earnings Growth: Companies with strong growth potential but little attention
        Low Debt-To-Equity Ratio: Financially stable companies with room to grow.

PHASE 2:
    BackTest on Historical Data
    Market Regime Detection (a way to identify market transition from trending to ranging e.g: Bollinger Bands or Mean-reversion)
    Dynamic Stop-Loss and Take Profit Levels: Use recent ATR or Volatility to set new risk/reward levels
    Multi-Timeframe Analysis
    Async.IO
    Fundamental Analysis:
        Insider Buying: Indicates confidence from management in future performance.
        MACD
        Bollinger Bands
    Technical Analysis:
        Consolidation Zones: Stocks trading sideways in a tight range, indicating accumulation by smart money.

* Send Text Messages of stocks to review but eventually auto buy and sell.
#TODO: review other endpoints from finnhub
*#TODO: ADD build devops features (auto schedule on github actions poetry, pre-configs clean ups etc)



Based on the market classification in your determine_market_type function, here’s the ideal trading strategy for each market condition:

Trending Market

Strategy: Trend-following
Indicators to Use: Moving Averages (e.g., 20 EMA & 50 EMA), ADX (>25 for strong trend), RSI (confirmation for overbought/oversold).
Entry: Buy when short-term MA crosses above long-term MA (golden cross) or sell when it crosses below (death cross).
Exit: Take profits at key resistance/support levels or when ADX weakens.
Stop Loss: Below recent swing low (for long) or above recent swing high (for short).
Calm Market

Strategy: Mean-reversion (Range Trading)
Indicators to Use: Bollinger Bands, RSI, ATR (low volatility confirmation).
Entry: Buy near lower Bollinger Band and sell near the upper band.
Exit: Exit at the opposite band or a predefined profit target.
Stop Loss: Slightly below/above range support/resistance.
Volatile Market

Strategy: Breakout Trading
Indicators to Use: ATR (high volatility confirmation), Relative Volume (>1.5), Bollinger Bands (widening bands).
Entry: Enter on breakouts of key resistance (buy) or support (sell) with high volume.
Exit: Use ATR-based stop loss and trailing stops to capture trends.
Stop Loss: ATR-based stop or recent consolidation level.
Sideways Market

Strategy: Mean-reversion or Short-Term Scalping
Indicators to Use: RSI (overbought/oversold), Stochastic Oscillator, Bollinger Bands.
Entry: Buy near support, sell near resistance; use RSI divergence for confirmation.
Exit: Exit at opposite range level or with tight trailing stops.
Stop Loss: Just outside the range boundary.








************ TECHNICAL ************

APIS:
yfinance for specific stock data
finnhub for all stocks and their categories
robinhood to keep track of my pre-existing investments in context to autobot



Here is a list of files typically necessary for building and managing a Python trading bot:

1. Main Bot File (e.g., main.py)
This is the core of your bot, where the main logic for the trading process runs. It might include functions for fetching data, executing trades, and managing the trading strategy.


2. Configuration File (e.g., config.py or config.json) ***
This file stores configuration settings such as API keys, account credentials, trading parameters (like risk management), and other adjustable settings for the bot.


3. Requirements File (requirements.txt)
This file contains a list of all external Python libraries and dependencies your bot needs (e.g., requests, pandas, numpy, ccxt, etc.).


4. Logging File (log.py)
This handles logging of events, such as trade executions, errors, or any other noteworthy bot activity. This could be configured with Python's logging module to output logs to a file or the console.


5. Data Retrieval File (e.g., data_fetcher.py)
This file contains functions to fetch data from external sources, such as stock or crypto exchanges (e.g., using APIs like yfinance, ccxt, or alpha_vantage).


6. Strategy File (e.g., strategy.py)
Contains the trading strategy or algorithm, defining the conditions for when to buy, sell, or hold assets. This might include technical indicators, risk management rules, etc.


7. Risk Management File (risk_management.py)
This file includes logic for managing trading risks such as setting stop losses, calculating position size, and handling margin calls or drawdowns.


8. Execution File (executor.py)
Handles trade execution by interacting with the broker or exchange's API. This file sends buy, sell, or other trade instructions to the exchange.


9. Testing / Backtesting File (backtest.py)
This file is used for testing the trading strategy using historical data. It helps simulate the strategy's performance before running it live.


10. Database/File Storage (e.g., database.py or data_storage.py)
This stores trade history, logs, and other data necessary for later analysis or record-keeping. Could be a local database (SQLite, MySQL) or cloud-based (AWS, Firebase).


11. Utility Files (e.g., utils.py)
Contains any utility functions used across the bot, such as date/time functions, data formatting, or logging utilities.


12. Scheduler File (scheduler.py)
If the bot needs to run at regular intervals (e.g., every minute or hour), this file helps schedule tasks using Python’s schedule library or a cron job.

13. API Interaction File (e.g., api_client.py)
Contains classes and functions to interact with specific exchange APIs (e.g., Binance, Coinbase, Kraken, etc.), handling authentication, request/response, and error handling.
14. Test Files (e.g., test_bot.py, test_strategy.py)
These files are used for unit testing the individual components of the trading bot, ensuring that each part functions correctly.


15. Dockerfile (Optional)
If you want to containerize your bot for easy deployment, a Dockerfile will define the environment and setup for your bot to run inside a container.


16. README.md
A file that provides documentation about the project, including how to set it up, configure, and run the bot. It may also include trading strategy explanations and usage notes.
